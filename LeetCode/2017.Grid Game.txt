class Solution {
public:
    long long gridGame(vector<vector<int>>& grid) 
    {
        vector<vector<long long>> firstRobotDP;
        vector<vector<long long>> secondRobotDP;
        for(int i = 0; i < grid.size(); ++i)
        {
            vector<long long> firstTemp;
            vector<long long> secondTemp;
            for(int j = 0; j < grid[i].size(); ++j)
            {
                firstTemp.emplace_back(-1);
                secondTemp.emplace_back(-1);
            }            
            firstRobotDP.emplace_back(firstTemp);
            secondRobotDP.emplace_back(secondTemp);
        }
        Solve(0, 0, grid, firstRobotDP, true);
        return Solve(0, 0, grid, secondRobotDP, false);
    }
private:
    int Solve(int row, int column, vector<vector<int>>& grid, vector<vector<long long>>& DP, bool isFirstRobot)
    {
        if(grid.size() <= row || grid[row].size() <= column)
            return 0;
        if(DP[row][column] != -1)
            return DP[row][column];
        
        int firstOption = Solve(row + 1, column, grid, DP, isFirstRobot);
        int secondOption = Solve(row, column + 1, grid, DP, isFirstRobot);
        DP[row][column] = grid[row][column] + (firstOption < secondOption ? secondOption : firstOption);

        if(isFirstRobot)
        {
            if(firstOption < secondOption && (column + 1) < grid[row].size())
                grid[row][column + 1] = 0;
            if(secondOption < firstOption && (row + 1) < grid.size())
                grid[row + 1][column] = 0;
        }
        return grid[row][column];
    }
};
