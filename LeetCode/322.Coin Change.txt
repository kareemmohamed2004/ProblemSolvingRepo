class Solution {
public:
    int coinChange(vector<int> coins, int requiredValue)
    {
        if (requiredValue < 1)
            return 0;
        sort(coins.begin(), coins.end());
        vector<int> memory(requiredValue + 1, INT_MAX - 1);
        for (int i = 0; i <= requiredValue; i++)
            memory[i] = GetMinNumberOfCoins(coins, i, memory);

        if (memory[requiredValue] == INT_MAX - 1)
            return -1;

        return memory[requiredValue];
    }
private:
    int GetMinNumberOfCoins(vector<int>& itemsValues, int &amount, vector<int>& memory)
    {
        if (amount < 1)
            return 0;
        
        int firstOption, secondOption, minCountOfCoins = INT_MAX - 1,currentCountOfCoins;
        for (int i = 0; i < itemsValues.size(); i++)
        {
            if (amount < itemsValues[i])
                break;

            firstOption = 1 + memory[amount - itemsValues[i]];
            secondOption = memory[amount];
            currentCountOfCoins = min(firstOption, secondOption);
            minCountOfCoins = min(currentCountOfCoins, minCountOfCoins);
        }
        return minCountOfCoins;
    }
};