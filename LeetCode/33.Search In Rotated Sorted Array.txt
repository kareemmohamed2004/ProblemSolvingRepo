struct GenericResult
{
    bool isTargetExist, isPivotFound;
    int targetIndex, firstStart, firstEnd, secondStart, secondEnd;

    GenericResult(bool _isTargetExist = false, bool _isPivotFound = false, int _targetIndex = -1, int _firstStart = 0, int _firstEnd = 0, int _secondStart = 0, int _secondEnd = 0)
    {
        isTargetExist = _isTargetExist;
        isPivotFound = _isPivotFound;
        targetIndex = _targetIndex;
        firstStart = _firstStart;
        firstEnd = _firstEnd;
        secondStart = _secondStart;
        secondEnd = _secondEnd;
    }
};
class Solution
{
public:
    int search(vector<int>& nums, int target)
    {
        return FindTarget(nums, target, 0, nums.size() - 1);
    }
private:
    int FindTarget(vector<int>& nums, int& target, int start, int end)
    {
        if (end < start)
            return -1;

        if (nums[start] == target)
            return start;

        if (nums[end] == target)
            return end;

        int mid;
        mid = (start + end) / 2;

        if (nums[mid] == target)
            return mid;

        if (nums[mid] < nums[end])
        {
            if (nums[mid] < target && target < nums[end])
            {
                return FindTarget(nums, target, mid + 1, end - 1);
            }
            else
            {
                return FindTarget(nums, target, start, mid - 1);
            }
        }

        if (nums[start] < nums[mid])
        {
            if (nums[start] < target && target < nums[mid])
            {
                return FindTarget(nums, target, start + 1, mid - 1);
            }
            else
            {
                return FindTarget(nums, target, mid + 1, end);
            }
        }
        return -1;
    }
};