using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ProblemAnswer
{
    public class Program
    {
        public static void Main(string[] args)
        {
            ProblemAnswer();
        }
        private static void ProblemAnswer()
        {
            int NumberOfCities, NumberOfHighWays, StartCity, DestinationCity, EdgeStart, EdgeEnd, Cost;
            string[] Input;
            List<Tuple<int, int>>[] CitiesWithTheirNeighbors;
            Input = Console.ReadLine().Split(" ");
            NumberOfCities = Convert.ToInt32(Input[0]);
            NumberOfHighWays = Convert.ToInt32(Input[1]);
            StartCity = 1;
            DestinationCity = NumberOfCities;
            CitiesWithTheirNeighbors = new List<Tuple<int, int>>[NumberOfCities + 1];
            for (int j = 0; j < NumberOfHighWays; j++)
            {
                Input = Console.ReadLine().Split(" ");
                EdgeStart = Convert.ToInt32(Input[0]);
                EdgeEnd = Convert.ToInt32(Input[1]);
                Cost = Convert.ToInt32(Input[2]);
                if (EdgeStart != EdgeEnd)
                {
                    if (CitiesWithTheirNeighbors[EdgeStart] is not null)
                        CitiesWithTheirNeighbors[EdgeStart].Add(new(EdgeEnd, Cost));
                    else
                        CitiesWithTheirNeighbors[EdgeStart] = new List<Tuple<int, int>>() { new(EdgeEnd, Cost) };

                    if (CitiesWithTheirNeighbors[EdgeEnd] is not null)
                        CitiesWithTheirNeighbors[EdgeEnd].Add(new(EdgeStart, Cost));
                    else
                        CitiesWithTheirNeighbors[EdgeEnd] = new List<Tuple<int, int>>() { new(EdgeStart, Cost) };
                }
            }
            var Result = GetMinimumDistanceFromStartCityToDestinationCity(CitiesWithTheirNeighbors, StartCity, DestinationCity, NumberOfCities);
            while (Result.Count > 0)
                Console.Write(Result.Pop() + " ");
            
            Result.Clear();
        }

        private static Stack<int> GetMinimumDistanceFromStartCityToDestinationCity(List<Tuple<int, int>>[] CitiesWithTheirNeighbors, int StartCity, int EndCity, int NumberOfCities)
        {
            int CurrentCity, CostFromCurrentCityToNeighbor, NeighborCity;
            ulong TotalCostToCurrentCity;
            ulong[] CitiesMinimumCost = new ulong[NumberOfCities + 1];
            int[] CityParent = new int[NumberOfCities + 1];
            var PriorityQueue = new PriorityQueue<int, ulong>(Comparer<ulong>.Create((x, y) => x.CompareTo(y)));
            for (int i = 1; i < CitiesMinimumCost.Length; i++)
                CitiesMinimumCost[i] = ulong.MaxValue;

            //Item1 is the number of the neighbor city
            //Item2 is cost to the neighbor city
            CurrentCity = StartCity;
            TotalCostToCurrentCity = 0;
            CitiesMinimumCost[CurrentCity] = TotalCostToCurrentCity;
            CityParent[StartCity] = -1;
            PriorityQueue.Enqueue(CurrentCity, TotalCostToCurrentCity);
            while (PriorityQueue.Count > 0)
            {
                CurrentCity = PriorityQueue.Dequeue();
                TotalCostToCurrentCity = CitiesMinimumCost[CurrentCity];
                var CurrentCityNeighbores = CitiesWithTheirNeighbors[CurrentCity];
                if (CurrentCityNeighbores is not null)
                {
                    foreach (var Neighbor in CurrentCityNeighbores)
                    {
                        NeighborCity = Neighbor.Item1;
                        CostFromCurrentCityToNeighbor = Neighbor.Item2;
                        if (TotalCostToCurrentCity + (ulong)CostFromCurrentCityToNeighbor < CitiesMinimumCost[NeighborCity]) 
                        {
                            CitiesMinimumCost[NeighborCity] = TotalCostToCurrentCity + (ulong)CostFromCurrentCityToNeighbor;
                            CityParent[NeighborCity] = CurrentCity;
                            PriorityQueue.Enqueue(NeighborCity, CitiesMinimumCost[NeighborCity]);
                        }
                    }
                }
            }
            return GetParents(CityParent, EndCity);
        }

        private static Stack<int> GetParents(int[] CityParent, int EndCity)
        {
            Stack<int> RoadToDestiation = new();
            int Parent = 1, Son = EndCity;
            CityParent[Parent] = -1;
            RoadToDestiation.Push(Son);
            while (Parent != -1)
            {
                Parent = CityParent[Son];
                if (Parent == 0)
                {
                    RoadToDestiation.Clear();
                    RoadToDestiation.Push(-1);
                    break;
                }
                if (Parent > 0)
                    RoadToDestiation.Push(Parent);
                Son = Parent;
            }
            return RoadToDestiation;
        }
    }
}