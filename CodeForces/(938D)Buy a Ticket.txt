#include<iostream>
#include<vector>
#include<queue>
using namespace std;

struct CitiesComparer {
    bool operator()(const pair<unsigned int, unsigned long long>& City1, const pair<unsigned int, unsigned long long>& City2)
    {
        return City1.second > City2.second;
    }
};

void GetCitiesMinimumCost(const vector<vector<pair<unsigned int, unsigned long long>>>& CitiesWithTheirNeighbors, vector<unsigned long long>& CitiesConcertCost)
{
    unsigned int CurrentCityNumber, NeighborCityNumber;
    unsigned long long CurrentCityCost, NeighborCityPathCost, NeighborCityConcertCost;
    vector<pair<unsigned int, unsigned long long>> CityNeighbors;
    priority_queue<pair<unsigned int, unsigned long long>, vector<pair<unsigned int, unsigned long long>>, CitiesComparer> Cities;
    for (unsigned int i = 1; i < CitiesConcertCost.size(); i++)
        Cities.push(make_pair(i, CitiesConcertCost[i]));

    while (!Cities.empty())
    {
        CurrentCityNumber = Cities.top().first;
        CurrentCityCost = Cities.top().second;
        Cities.pop();
        if (CurrentCityCost != CitiesConcertCost[CurrentCityNumber])
            continue;

        CityNeighbors = CitiesWithTheirNeighbors[CurrentCityNumber];
        for (unsigned int i = 0; i < CityNeighbors.size(); i++)
        {
            NeighborCityNumber = CityNeighbors[i].first;
            NeighborCityPathCost = CityNeighbors[i].second;
            NeighborCityConcertCost = CitiesConcertCost[NeighborCityNumber];
            if (CurrentCityCost + NeighborCityPathCost < NeighborCityConcertCost)
            {
                CitiesConcertCost[NeighborCityNumber] = CurrentCityCost + NeighborCityPathCost;
                Cities.push(make_pair(NeighborCityNumber, CurrentCityCost + NeighborCityPathCost));
            }
        }
    }
}


int main()
{
    unsigned int NumberOfCities, NumberOfEdges, EdgeStart, EdgeEnd;
    unsigned long long EdgeCost, ConcertCostInCity;
    vector<unsigned long long> CitiesConcertCost;
    vector<vector<pair<unsigned int, unsigned long long>>> CitiesWithTheirNeighbors;
    cin >> NumberOfCities >> NumberOfEdges;
    for (unsigned int i = 0; i <= NumberOfCities; i++)
    {
        vector<pair<unsigned int, unsigned long long>> CityNeighbors;
        CitiesWithTheirNeighbors.push_back(CityNeighbors);
    }
    for (unsigned int i = 0; i < NumberOfEdges; i++)
    {
        cin >> EdgeStart >> EdgeEnd >> EdgeCost;
        CitiesWithTheirNeighbors[EdgeStart].push_back(make_pair(EdgeEnd, EdgeCost * 2));
        CitiesWithTheirNeighbors[EdgeEnd].push_back(make_pair(EdgeStart, EdgeCost * 2));
    }
    CitiesConcertCost.push_back(0);
    for (unsigned int i = 0; i < NumberOfCities; i++)
    {
        cin >> ConcertCostInCity;
        CitiesConcertCost.push_back(ConcertCostInCity);
    }
    GetCitiesMinimumCost(CitiesWithTheirNeighbors, CitiesConcertCost);
    for (unsigned int i = 1; i < CitiesConcertCost.size(); i++)
        cout << CitiesConcertCost[i] << " ";

    return 0;
}