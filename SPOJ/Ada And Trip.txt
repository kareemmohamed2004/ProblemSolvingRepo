#include <iostream>
#include <vector>
#include <tuple>
#include <queue>
#include <unordered_set>
#include <functional>
#include <limits>
#include <sstream>
using namespace std;

using Graph = vector<vector<pair<int, int>>>;

pair<int, int> GetLengthAndCountOfFurthestCity(const Graph& cities, int startCity) {
    vector<int> distances(cities.size(), numeric_limits<int>::max());
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    unordered_set<int> furthestCities;

    distances[startCity] = 0;
    pq.emplace(0, startCity);

    int maxLength = -1;

    while (!pq.empty()) {
        int currentCity = pq.top().second;
        int currentDistance = pq.top().first;
        pq.pop();

        if (currentDistance > distances[currentCity])
            continue;

        if (currentDistance > maxLength) {
            maxLength = currentDistance;
            furthestCities.clear();
            furthestCities.insert(currentCity);
        } else if (currentDistance == maxLength) {
            furthestCities.insert(currentCity);
        }

        for (const auto& neighbor : cities[currentCity]) {
            int neighborCity = neighbor.first;
            int cost = neighbor.second;
            if (currentDistance + cost < distances[neighborCity]) {
                distances[neighborCity] = currentDistance + cost;
                pq.emplace(distances[neighborCity], neighborCity);
            }
        }
    }

    return make_pair(maxLength, furthestCities.size());
}

int main() {
    int numberOfCities, numberOfRoads, numberOfQueries;

    cin >> numberOfCities >> numberOfRoads >> numberOfQueries;

    Graph cities(numberOfCities + 1);

    for (int i = 0; i < numberOfRoads; ++i) {
        int edgeStart, edgeEnd, edgeLength;
        cin >> edgeStart >> edgeEnd >> edgeLength;
        cities[edgeStart].emplace_back(edgeEnd, edgeLength);
        cities[edgeEnd].emplace_back(edgeStart, edgeLength);
    }

    for (int i = 0; i < numberOfQueries; ++i) {
        int startCity;
        cin >> startCity;
        auto result = GetLengthAndCountOfFurthestCity(cities, startCity);
        cout << result.first << " " << result.second << endl;
    }

    return 0;
}