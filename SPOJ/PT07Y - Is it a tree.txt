using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ProblemAnswer
{
    public class Program
    {
        public static void Main(string[] args)
        {
            ProblemAnswer();
        }
        private static void ProblemAnswer()
        {
            Dictionary<int, List<int>> NodesWithTheirNeighbors = new();
            int NumberOfNodes, NumberOfEdges, EdgeStart, EdgeEnd;
            var Temp = Console.ReadLine().Split(' ');
            NumberOfNodes = Convert.ToInt32(Temp[0]);
            NumberOfEdges = Convert.ToInt32(Temp[1]);
            for (int i = 0; i < NumberOfEdges; i++)
            {
                Temp = Console.ReadLine().Split(' ');
                EdgeStart = Convert.ToInt32(Temp[0]);
                EdgeEnd = Convert.ToInt32(Temp[1]);
                if (NodesWithTheirNeighbors.ContainsKey(EdgeStart))
                    NodesWithTheirNeighbors[EdgeStart].Add(EdgeEnd);
                else
                    NodesWithTheirNeighbors.TryAdd(EdgeStart, new List<int>() { EdgeEnd });
                if(NodesWithTheirNeighbors.ContainsKey(EdgeEnd))
                    NodesWithTheirNeighbors[EdgeEnd].Add(EdgeStart);
                else
                    NodesWithTheirNeighbors.TryAdd(EdgeEnd, new List<int>() { EdgeStart });
            }
            if (NumberOfEdges != NumberOfNodes - 1)
            {
                Console.WriteLine("NO");
                return;
            }
            if (TraverseGraph(NodesWithTheirNeighbors) == NumberOfNodes)
                Console.WriteLine("YES");
            else
                Console.WriteLine("NO");
        }

        private static int TraverseGraph(Dictionary<int, List<int>> NodesWithTheirChildren)
        {
            HashSet<int> VisitedNodes = new();
            TraverseNodeChildren(NodesWithTheirChildren.Keys.First(), NodesWithTheirChildren, VisitedNodes);
            return VisitedNodes.Count;
        }

        private static void TraverseNodeChildren(int Node, Dictionary<int, List<int>> NodesWithTheirChildren, HashSet<int> VisitedNodes)
        {
            if (VisitedNodes.Contains(Node))
                return;
            List<int> ChildrenOfNode = NodesWithTheirChildren[Node];
            VisitedNodes.Add(Node);
            foreach (var Child in ChildrenOfNode)
                TraverseNodeChildren(Child, NodesWithTheirChildren, VisitedNodes);
        }
    }
}